name: cd

on:
  push:
    branches: [main]

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.25.1"

# Create docker container
      - name: Build app
        run: ./scripts/buildprod.sh

# Docker image to ECR
      - name: Debug OIDC token
        run: |
              curl -s -H "Authorization: Bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
              $ACTIONS_ID_TOKEN_REQUEST_URL | jq

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, Tag, and Push Docker image
        run: |
          IMAGE_URI=${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY }}:latest
          echo "Building and pushing image: $IMAGE_URI"
          docker build -t $IMAGE_URI .
          docker push $IMAGE_URI


# Terraform for EC2 automation
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.5

      - name: Export GitHub Secrets to TF vars
        run: |
          echo "TF_VAR_aws_region=${{ secrets.AWS_REGION }}" >> $GITHUB_ENV
          echo "TF_VAR_aws_account_id=${{ secrets.AWS_ACCOUNT_ID }}" >> $GITHUB_ENV
          echo "TF_VAR_ecr_repository=${{ secrets.ECR_REPOSITORY }}" >> $GITHUB_ENV
          echo "TF_VAR_ec2_key_name=${{ secrets.KEY_NAME }}" >> $GITHUB_ENV
          echo "TF_VAR_ami_id=${{ secrets.AMI_ID }}" >> $GITHUB_ENV
          echo "TF_VAR_ec2_instance_type=${{ secrets.EC2_INSTANCE_TYPE }}" >> $GITHUB_ENV
          echo "TF_VAR_security_group_id=${{ secrets.SECURITY_GROUP_ID }}" >> $GITHUB_ENV

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform

      - name: Terraform Apply
        working-directory: ./terraform
        run: terraform apply -auto-approve -no-color -var "subnet_id=${{ secrets.EC2_SUBNET_ID }}"

      - name: Get EC2 Public IP
        id: get-ip
        working-directory: ./terraform
        run: |
          PUBLIC_IP=$(terraform output -raw ec2_public_ip)
          # Use awk to aggressively trim whitespace and ensure a clean string
          CLEAN_IP=$(echo "$PUBLIC_IP" | awk '{$1=$1};1')
          echo "ec2_public_ip=$CLEAN_IP" >> $GITHUB_OUTPUT

      - name: Update Docker container on EC2
        run: |
          echo "${{ secrets.EC2_PRIVATE_KEY }}" > private_key.pem
          chmod 600 private_key.pem
 
          ssh -o StrictHostKeyChecking=no -i private_key.pem ec2-user@${{ steps.get-ip.outputs.ec2_public_ip }} "
            docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:latest && \
            docker stop notely || true && \
            docker rm notely || true && \
            docker run -d --restart unless-stopped -p 80:80 --name notely ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:latest
          "
          rm -f private_key.pem
        shell: bash